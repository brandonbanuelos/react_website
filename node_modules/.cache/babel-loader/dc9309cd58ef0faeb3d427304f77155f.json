{"ast":null,"code":"var _jsxFileName = \"/Users/brandonbanuelos/Documents/Website Practice/react_website/src/pages/Projects.js\";\nimport React from 'react';\nimport { ProjectsList } from '../helpers/ProjectsList';\nimport '../styles/Projects.css';\nimport ProjectItem from '../components/ProjectItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Projects() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"projects\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"projectsTitle\",\n      children: \"My Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"projectsList\",\n      children: ProjectsList.map((projectItem, key) => {\n        return /*#__PURE__*/_jsxDEV(ProjectItem, {\n          image: projectItem.image,\n          name: projectItem.name,\n          year: projectItem.year\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"projectsText\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"PySynth\",\n        children: \"PySynth\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This project was term project for my first semester at university in 2019. It acted as a virtual analog synthesizer. I programmed this in Python using PyAudio, Tkinter, NumPy, and MatPlotLib. This project uses a crude form of UI, but it was my first real project using code. It was based on additive synthesis and had two oscillators that generated different types of sound waves based on NumPy functions. Click below to find my source code and my video presentation of it!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: e => {\n            e.preventDefault();\n            window.location.href = \"https://youtu.be/OitXpHwO8Ho\";\n          },\n          className: \"PySynthVideo\",\n          children: \"View Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"PySynthCode\",\n          children: \"View Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"InstaBot\",\n        children: \"InstaBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This project was something I did using Python and Selenium. It uses Selenium to access the HTML elements inside of Instagram's website, so it automates the browsing experience. Instagram is full of bots these days, so I wondered how difficult it would be for me to make one. This specific one logs in, goes to a specific hashtag, and likes and/or comments on posts depending on your user settings.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"InstaBotCode\",\n        children: \"View Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"PatrolBotV1\",\n        children: \"PatrolBotV1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This project marked the beginning of my senior project with a team of four other students. This is an ambitious attempt to combine, software, robotics, and machine learning, to detect bike theft. This version was dubbed V1 after the fact because it was a prototype. It used primitive graphics and ran locally as a desktop software with only one machine learning model. It was programmed in Python using PyTorch, PyQt5, and NumPy. It was meant to be ran locally on a Raspberry Pi which controlled the robot, and the Pi would be VNC'd in order to view the feed. The machine learning model was trained on images of bikes, humans, bolt cutters, and angle grinders. If objects were detected, they would be placed into the logs, so the user could view any potentially dangerous threats. The repository for this one has been transformed into the the 1.5 version, so I will include the link in the next section.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"PatrolBotV2\",\n        children: \"PatrolBotV2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This version of the project marked the next step into the final product. This version was still ran locally, but it added a state-of-the-art Slow Fast Model trained on Kinetics 400 to detect actions through live video. This meant the robot could now detect aggressive actions coupled with the use of object detection to get a fuller picture of possible bike theft. This also added the use of IOU (intersection over union) of objects such as bolt cutters or angle grinders on top of bikes in order to provide a type of threat model algorithm Additionally, this version marked an increase in the UI components of the software. This time the UI was customized using CSS. The link below contains the 1.5 version of PatrolBot. This means it has the action detection model and algorithm, but it doesn't have the upgraded UI. This is because version 2 was still part of the prototype development.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"PatrolBotV1.5\",\n        children: \"View Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"I3DDemo\",\n        children: \"I3D Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This demo was created to show of my novel solution to a problem my group encountered during the development of PatrolBotV3. The issue was that the action detection model ran on mp4 files rather than lists or arrays of frames. PatrolBotV3 was the transformation from a locally-ran application to a web application, so saving and loading mp4 files would have added too much complication. Instead I decided to find a way to save a series of frames from the webcam and format them into a way that was readable by the Slow Fast or Inflated 3D models for action detection. This demo also shows off the training on this model done by my team. We trained this model to detect if behavior is aggressive or not. This demo takes webcam input and stores it during the duration of running time in the code, and predicts whether or not behavior from the video clip is agressive or not.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"I3DCode\",\n        children: \"View Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"PatrolBotV3\",\n        children: \"PatrolBotV3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This version of PatrolBot is still in development as of March 2022. This is the full webapp version of the software. The robot was now provided to us by a robotics professor at the University of Nevada, Reno, and the web application controls the frontend and backend. We are using Django with HTML, CSS, and Javascript, on an elastic beanstalk instace. Video data is streamed from a Raspberry Pi on the robot to the Django app where both machine learning models are ran. Commands from the website's frontend are sent to a separate Raspberry Pi on the robot which takes the commands and interprets them as ROS code before sending it to the robot. The repository is currently private.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/brandonbanuelos/Documents/Website Practice/react_website/src/pages/Projects.js"],"names":["React","ProjectsList","ProjectItem","Projects","map","projectItem","key","image","name","year","e","preventDefault","window","location","href"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAO,wBAAP;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;;AAEA,SAASC,QAAT,GAAoB;AAChB,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAA+BF,YAAY,CAACG,GAAb,CAAiB,CAACC,WAAD,EAAcC,GAAd,KAAsB;AAClE,4BAAO,QAAE,WAAF;AAEP,UAAA,KAAK,EAAED,WAAW,CAACE,KAFZ;AAGP,UAAA,IAAI,EAAGF,WAAW,CAACG,IAHZ;AAIP,UAAA,IAAI,EAAGH,WAAW,CAACI;AAJZ,WACAH,GADA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAKH,OAN8B;AAA/B;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR,eAWQ;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI;AAAQ,UAAA,IAAI,EAAC,QAAb;AACA,UAAA,OAAO,EAAKI,CAAD,IAAO;AAAEA,YAAAA,CAAC,CAACC,cAAF;AACpBC,YAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAqB,8BAArB;AAAqD,WAFrD;AAGA,UAAA,SAAS,EAAC,cAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXR,eAmBI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,eAoBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBR,eA2BQ;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BR,eA4BI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BJ,eA6BQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BR,eA6CI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7CJ,eA8CQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CR,eA4DQ;AAAQ,QAAA,SAAS,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5DR,eA6DI;AAAI,QAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7DJ,eA8DQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9DR,eA4EQ;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5ER,eA6EI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7EJ,eA8EQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9ER;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuGH;;KAxGQX,Q;AA0GT,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { ProjectsList } from '../helpers/ProjectsList';\nimport '../styles/Projects.css';\nimport ProjectItem from '../components/ProjectItem'\n\nfunction Projects() {\n    return (\n        <div className=\"projects\">\n            <h1 className=\"projectsTitle\">My Projects</h1>\n            <div className=\"projectsList\">{ProjectsList.map((projectItem, key) => {\n                return < ProjectItem \n                key = {key}\n                image={projectItem.image} \n                name ={projectItem.name} \n                year ={projectItem.year}/>\n            })}\n            </div>\n            <div className=\"projectsText\">\n                <h1 className=\"PySynth\">PySynth</h1>\n                    <p>This project was term project for my first semester at\n                        university in 2019. It acted as a virtual analog\n                        synthesizer. I programmed this in Python using PyAudio,\n                        Tkinter, NumPy, and MatPlotLib. This project uses a crude\n                        form of UI, but it was my first real project using code. It\n                        was based on additive synthesis and had two oscillators that\n                        generated different types of sound waves based on NumPy functions.\n                        Click below to find my source code and my video presentation of it!\n                    </p>\n                    <div className=\"buttonContainer\">\n                        <button type=\"button\" \n                        onClick = {(e) => { e.preventDefault();\n                        window.location.href=\"https://youtu.be/OitXpHwO8Ho\";}}\n                        className=\"PySynthVideo\">View Video</button>\n                        <button className=\"PySynthCode\">View Code</button>\n                     </div>\n                \n                <h1 className=\"InstaBot\">InstaBot</h1>\n                    <p>This project was something I did using Python and Selenium.\n                        It uses Selenium to access the HTML elements inside of Instagram's\n                        website, so it automates the browsing experience. Instagram is\n                        full of bots these days, so I wondered how difficult it would be \n                        for me to make one. This specific one logs in, goes to a specific hashtag,\n                        and likes and/or comments on posts depending on your user settings.\n                    </p>\n                    <button className=\"InstaBotCode\">View Code</button>\n                <h1 className=\"PatrolBotV1\">PatrolBotV1</h1>\n                    <p>This project marked the beginning of my senior project with a team of\n                        four other students. This\n                        is an ambitious attempt to combine, software, robotics, and \n                        machine learning, to detect bike theft. This version was dubbed V1 after the fact\n                        because it was a prototype. It used primitive graphics and ran \n                        locally as a desktop software with only one machine learning \n                        model. It was programmed in Python using PyTorch, PyQt5, and\n                        NumPy. It was meant to be ran locally on a Raspberry Pi \n                        which controlled the robot, and the Pi\n                        would be VNC'd in order to view the feed. The machine learning model\n                        was trained on images of bikes, humans, bolt cutters, and angle grinders.\n                        If objects were detected, they would be placed into the logs, so\n                        the user could view any potentially dangerous threats. The repository for this one\n                        has been transformed into the the 1.5 version, so I will include the link\n                        in the next section.\n                    </p>\n                <h1 className=\"PatrolBotV2\">PatrolBotV2</h1>\n                    <p>This version of the project marked the next step into the final product.\n                        This version was still ran locally, but it added a state-of-the-art\n                        Slow Fast Model trained on Kinetics 400 to detect actions through\n                        live video. This meant the robot could now detect aggressive actions\n                        coupled with the use of object detection to get a fuller picture of \n                        possible bike theft. This also added the use of IOU (intersection \n                        over union) of objects such as bolt cutters or angle grinders on\n                        top of bikes in order to provide a type of threat model algorithm\n                        Additionally, this version marked an increase in the UI components of \n                        the software. This time the UI was customized using CSS. The link below\n                        contains the 1.5 version of PatrolBot. This means it has the action detection\n                        model and algorithm, but it doesn't have the upgraded UI. This is because\n                        version 2 was still part of the prototype development.\n                    </p>\n                    <button className=\"PatrolBotV1.5\">View Code</button>\n                <h1 className=\"I3DDemo\">I3D Demo</h1>\n                    <p>This demo was created to show of my novel solution to a problem\n                        my group encountered during the development of PatrolBotV3. The issue\n                        was that the action detection model ran on mp4 files rather than lists\n                        or arrays of frames. PatrolBotV3 was the transformation from a locally-ran\n                        application to a web application, so saving and loading mp4 files would have\n                        added too much complication. Instead I decided to find a way to save a series\n                        of frames from the webcam and format them into a way that was readable by the \n                        Slow Fast or Inflated 3D models for action detection. This demo also\n                        shows off the training on this model done by my team. We trained this model\n                        to detect if behavior is aggressive or not. This demo takes\n                        webcam input and stores it during the duration of running time \n                        in the code, and predicts whether or not behavior from the video clip \n                        is agressive or not.\n                    </p>\n                    <button className=\"I3DCode\">View Code</button>\n                <h1 className=\"PatrolBotV3\">PatrolBotV3</h1>\n                    <p>This version of PatrolBot is still in development as of March 2022. \n                        This is the full webapp version of the software. The robot was now \n                        provided to us by a robotics professor at the University of Nevada, Reno, and \n                        the web application controls the frontend and backend. We are using Django with\n                        HTML, CSS, and Javascript, on an elastic beanstalk instace. Video data\n                        is streamed from a Raspberry Pi on the robot to the Django app where both machine\n                        learning models are ran. Commands from the website's frontend are sent to\n                        a separate Raspberry Pi on the robot which takes the commands and interprets them\n                        as ROS code before sending it to the robot. The repository is currently private.\n                    </p>\n                </div>\n        </div>\n\n    );\n}\n\nexport default Projects;"]},"metadata":{},"sourceType":"module"}